{"version":3,"sources":["components/Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","a","_templateObject","App","react_default","createElement","target","href","this","props","onClick","children","Component","StyledApp","div","App_templateObject","Head","header","_templateObject2","Title","h1","_templateObject3","Tagline","h2","_templateObject4","StyledImage","img","_templateObject5","StyledText","p","_templateObject6","Main","_templateObject7","Item","_templateObject8","Action","_templateObject9","components_Button","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qhBAGA,IAAMA,EAASC,IAAOC,EAAVC,KAsBGC,mLANX,OACEC,EAAAH,EAAAI,cAACN,EAAD,CAAQO,OAAO,SAASC,KAAMC,KAAKC,MAAMF,KAAMG,QAASF,KAAKC,MAAMC,SAAUF,KAAKC,MAAME,iBAH5EC,i0CCblB,IAAMC,EAAYb,IAAOc,IAAVC,KACTC,EAAOhB,IAAOiB,OAAVC,KAIJC,EAAQnB,IAAOoB,GAAVC,KAOLC,EAAUtB,IAAOuB,GAAVC,KAQPC,EAAczB,IAAO0B,IAAVC,KAIXC,EAAa5B,IAAO6B,EAAVC,KAQVC,EAAO/B,IAAOc,IAAVkB,KAKJC,EAAOjC,IAAOc,IAAVoB,KAOJC,EAASnC,IAAOc,IAAVsB,KAsCGjC,mLA9BX,OACEC,EAAAH,EAAAI,cAACQ,EAAD,KACET,EAAAH,EAAAI,cAACW,EAAD,KACEZ,EAAAH,EAAAI,cAACc,EAAD,kCACAf,EAAAH,EAAAI,cAACiB,EAAD,uCAIFlB,EAAAH,EAAAI,cAAC0B,EAAD,KACE3B,EAAAH,EAAAI,cAAC4B,EAAD,KACE7B,EAAAH,EAAAI,cAACuB,EAAD,6FAAiGxB,EAAAH,EAAAI,cAAA,WAAjG,+CAGAD,EAAAH,EAAAI,cAACuB,EAAD,6DAGAxB,EAAAH,EAAAI,cAAC8B,EAAD,KACE/B,EAAAH,EAAAI,cAACgC,EAAD,CAAQ9B,KAAK,wEAAb,YACAH,EAAAH,EAAAI,cAACgC,EAAD,CAAQ9B,KAAK,mCAAb,YAGJH,EAAAH,EAAAI,cAAC4B,EAAD,KACE7B,EAAAH,EAAAI,cAACoB,EAAD,CAAaa,IAAI,+BAxBX1B,aC1CE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAH,EAAAI,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c4e76a75.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst Button = styled.a`\n  color: black;\n  padding: 10px;\n  border: 1px solid black;\n  text-decoration: none;\n  font-size: 16px;\n  align-self: center;\n  margin-right: 10px;\n  &:hover {\n    background: black;\n    color: white;\n  }\n`\n\nclass App extends Component {\n  render () {\n    return (\n      <Button target='_blank' href={this.props.href} onClick={this.props.onClick}>{this.props.children}</Button>\n    )\n  }\n}\n\nexport default App\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport Button from './components/Button'\n\nconst StyledApp = styled.div``\nconst Head = styled.header`\n  padding-top: 50px;\n  text-align: center;\n`\nconst Title = styled.h1`\n  font-size: 28px;\n  font-weight: normal;\n  @media (min-width: 700px) {\n    font-size: 40px;\n  }\n`\nconst Tagline = styled.h2`\n  margin-top:10px;\n  font-size: 20px;\n  font-weight: normal;\n  @media (min-width: 700px) {\n    font-size: 24px;\n  }\n`\nconst StyledImage = styled.img`\n  width: 100%;\n  object-fit: contain;\n`\nconst StyledText = styled.p`\n  font-size: 16px;\n  margin-top: 0px;\n  margin-bottom: 10px;\n  @media (min-width: 700px) {\n    font-size: 20px;\n  }\n`\nconst Main = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-evenly;\n`\nconst Item = styled.div`\n  display: flex;\n  max-width: 400px;\n  flex-direction: column;\n  margin: 10px 0;\n  padding: 10px;\n`\nconst Action = styled.div`\n  display: flex;\n  @media (max-width:800px) {  \n    justify-content: center;\n  }\n`\nclass App extends Component {\n  render () {\n    return (\n      <StyledApp>\n        <Head>\n          <Title>Auður Gunnarsdóttir</Title>\n          <Tagline>\n            Javascript/React.js developer\n          </Tagline>\n        </Head>\n        <Main>\n          <Item>\n            <StyledText>Berlin-based Mechanical Engineer that recently turned JavaScript/React.js developer. <br />\n            Looking for my first position in the field.\n            </StyledText>\n            <StyledText>\n            Send me an email audgunnars@gmail.com or find me on:\n            </StyledText>\n            <Action>\n              <Button href='https://www.linkedin.com/in/au%C3%B0ur-gunnarsd%C3%B3ttir-5310a7164/'>LinkedIn</Button>\n              <Button href='https://github.com/audurgunnars'>GitHub</Button>\n            </Action>\n          </Item>\n          <Item>\n            <StyledImage src='girlonatrain.png' />\n          </Item>\n        </Main>\n      </StyledApp>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}